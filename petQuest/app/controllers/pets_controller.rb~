require 'csv'

class PetsController < ApplicationController
    def index
    require 'csv'  


    @pets = Pet.all
    end
    
	def new
        @pet=Pet.new
	end

  def create
   
  	@pet = Pet.new(pet_params)

  	if @pet.save
        redirect_to @pet
   	else
      	render 'new'
    end
	end

  def edit
  @pet = Pet.find(params[:id])
  end

  def show
        @pet=Pet.find(params[:id])
  end

  def update
    respond_to do |format|
      if @pet.update(pet_params)
        format.html { redirect_to @pet, notice: 'Pet was successfully updated.' }
        format.json { render :show, status: :ok, location: @pet }
      else
        format.html { render :edit }
        format.json { render json: @pet.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /pets/1
  # DELETE /pets/1.json
  def destroy
    @pet.destroy
    respond_to do |format|
      format.html { redirect_to pets_url, notice: 'Pet was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  def me
    @pet = Pet.find(params[:id])
    case @pet.pet_type
      when "Cat" 
            if @pet.age.to_f < 1 # it is kitten
              @weight_min = (Idealcatweight.find_by(english_name: @pet.breed).min_kg).to_f || "no such cat found"
              @weight_max = (Idealcatweight.find_by(english_name: @pet.breed).max_kg).to_f || "no such cat found"
              @R_me_min = (100 * (@pet.body_weight.to_f ** 0.67.to_f) * 6.732.to_f * (2.718.to_f ** (-0.189.to_f*@pet.body_weight.to_f/@weight_min)-0.66.to_f)).ceil
              @R_me_max = (100 * (@pet.body_weight.to_f ** 0.67.to_f) * 6.732.to_f * (2.718.to_f ** (-0.189.to_f*@pet.body_weight.to_f/@weight_max)-0.66.to_f)).ceil
              @me_result = (0.5.to_f * (@R_me_min + @R_me_max)).ceil

   
          else # it is adult cat
            case @pet.body_condition_score
            when "Normal" # slim-medium adult cat
              @me_result = (100 * @pet.body_weight ** 0.67).ceil
            when "Fat"
              @me_result = (130 * @pet.body_weight ** 0.4).ceil
            end
          end

      when "Dog"
        if @pet.age.to_f < 1 # it is puppy
          @weight_min = (Idealdogweight.find_by(english_name: @pet.breed).min_kg).to_f || "no such dog found"
              @weight_max = (Idealdogweight.find_by(english_name: @pet.breed).max_kg).to_f || "no such dog found"
              @R_me_min = (130 * (@pet.body_weight.to_f ** 0.75.to_f) * 3.2.to_f * (2.718.to_f ** (-0.87.to_f * @pet.body_weight.to_f / @weight_min) - 0.1.to_f)).ceil
              @R_me_max = (130 * (@pet.body_weight.to_f ** 0.75.to_f) * 3.2.to_f * (2.718.to_f ** (-0.87.to_f * @pet.body_weight.to_f / @weight_max) - 0.1.to_f)).ceil
              @me_result = (0.5.to_f * (@R_me_min + @R_me_max)).ceil

        else # it is adult dog
          if @pet.age.to_f > 7 || @pet.activity == "Inactive" # old or inactive dog
            @me_result = (95 * @pet.body_weight ** 0.75.to_f).ceil
          elsif @pet.body_weight <= 23 # small-medium adult dog
            @me_result = (180 * @pet.body_weight ** 0.75.to_f).ceil
          else # large adult dog
            @me_result = (200 * @pet.body_weight ** 0.75.to_f).ceil
          end
        end
      else 
        puts "no such pet type found"
      end
    # decimal numbers like 0.67, 6.732 will be considered as string rather than number if input directly
    # thererfore, we use .to_f to convert it into fraction then compute
    # ** = ^
    # .ceil means round up to nearest integer. If round up to tenth decimal, then it should be (number*10).ceil/10.0 .rb
  end

  def getdata

    # this contains what has been selected in the first select box

    Rails.logger.debug("Params: #{params[:pet][:pet_type]}")
    Rails.logger.debug('test3')
    # we get the data for selectbox 2
    if params[:pet][:pet_type] == "Dog"
    @data_for_select2 = Idealdogweight.all
    end
    if params[:pet][:pet_type] == "Cat"
    @data_for_select2 = Idealcatweight.all
    end
    Rails.logger.debug("Params: #{@data_select2.inspect}")

    
    
    if params[:pet][:pet_type] != ""

    # render an array in JSON containing arrays like:
    #[[:id1, :name1], [:id2, :name2]]
    render :json => @data_for_select2.map{|c| [c.english_name, c.english_name]}
    else

    render :json => [['',''],['','']]
    end
  end

def update
  @pet = Pet.find(params[:id])
 
  if @pet.update(pet_params)
    redirect_to @pet
  else
    render 'edit'
  end
end

def import
  	Idealcatweight.import(params[:file])
  	redirect_to pets_path, notice: "Pet breeds Added successfully"
end


private
  def pet_params
  	  
      params.require(:pet).permit(:name, :gender, :age, :months, :pet_type, :body_condition_score, :body_weight, :breed, :activity)
	
  end

     
end

